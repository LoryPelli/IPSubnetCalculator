---
import usable from '../utils/usable';
import ThisIP from './ThisIP.svelte';
import FindIP from './FindIP.vue';
import type { Range } from '../utils/types';
import { decimal } from '../utils/conversion';
interface Props {
    ip: string;
    subnets: number;
    ipClass: 'A' | 'B' | 'C';
    defaultSubnetMask: '255.0.0.0' | '255.255.0.0' | '255.255.255.0';
    defaultHostBits: 8 | 16 | 24;
    netID: string;
    newSubnetMask: string;
    networkBits: number;
    subnetBits: number;
    validHosts: number;
    isSpecial: boolean;
}
const {
    ip,
    subnets,
    ipClass,
    defaultSubnetMask,
    defaultHostBits,
    netID,
    newSubnetMask,
    networkBits,
    subnetBits,
    validHosts,
    isSpecial,
} = Astro.props;
const ranges: Range[] = [];
function pushRange(firstIP: string, lastIP: string) {
    ranges.push({ first: firstIP, last: lastIP });
}
---

<span class="font-bold">General information:</span>
<span>IP: {ip}</span>
<span>Number of subnets: {subnets}</span>
<span>Class: {ipClass}</span>
<span class="font-bold">Detailed information:</span>
<span>Default subnet mask: {defaultSubnetMask}</span>
<span>New subnet mask: {newSubnetMask}</span>
<span>CIDR notation: /{networkBits}</span>
<span class="flex flex-col items-center gap-x-1 md:flex-row">
    Number of hosts for each subnet: {validHosts}
    {
        isSpecial && (
            <span class="font-bold">
                (Special case when normal rule doesn't apply!)
            </span>
        )
    }
</span>
<div class="flex flex-col items-center gap-y-1">
    <div
        class="flex min-h-56 min-w-96 flex-col items-center justify-center rounded-md border-2 p-4 shadow-2xl shadow-black"
    >
        <ThisIP {ip} {ranges} client:only />
        <FindIP {subnets} hosts={validHosts} {ranges} client:only />
        <noscript class="text-2xl font-bold"
            >You need to enable JavaScript!</noscript
        >
    </div>
    <table>
        <colgroup>
            {Array.from({ length: 4 }, () => <col class="w-64" />)}
        </colgroup>
        <thead class="border-2">
            <th>Subnet</th>
            <th>Network IP</th>
            <th>Hosts Range</th>
            <th>Broadcast IP</th>
        </thead>
        <tbody class="border-2 text-center">
            {
                Array.from({ length: subnets }, (_, i) => {
                    const withSubnets = i.toString(2).padStart(subnetBits, '0');
                    const network = decimal(
                        withSubnets.padEnd(defaultHostBits, '0'),
                    );
                    const networkIP = `${netID}.${network}`;
                    const broadcast = decimal(
                        (subnetBits != 0 ? withSubnets : '1').padEnd(
                            defaultHostBits,
                            '1',
                        ),
                    );
                    const broadcastIP = `${netID}.${broadcast}`;
                    const firstIP = isSpecial
                        ? networkIP
                        : usable(networkIP, 1);
                    const lastIP = isSpecial
                        ? broadcastIP
                        : usable(broadcastIP, -1);
                    const equal = networkIP == broadcastIP;
                    pushRange(firstIP, lastIP);
                    return (
                        <tr>
                            <td>Subnet {i}</td>
                            <td>{networkIP}</td>
                            {equal && <td>{networkIP}</td>}
                            {!equal && (
                                <td>
                                    {firstIP} - {lastIP}
                                </td>
                            )}
                            <td>{broadcastIP}</td>
                        </tr>
                    );
                })
            }
        </tbody>
    </table>
</div>
