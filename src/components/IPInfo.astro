---
import usable from '../utils/usable';
import ThisIP from './ThisIP.svelte';
import FindIP from './FindIP.vue';
import { binary, decimal } from '../utils/conversion';
import wildcardMask from '../utils/wildcard';
import LoadingIndicator from './LoadingIndicator.astro';
interface Props {
    ip: string;
    subnets: number;
    ipClass: 'A' | 'B' | 'C';
    defaultSubnetMask: '255.0.0.0' | '255.255.0.0' | '255.255.255.0';
    defaultNetworkBits: 8 | 16 | 24;
    defaultHostBits: 8 | 16 | 24;
    netID: string;
    newSubnetMask: string;
    networkBits: number;
    subnetBits: number;
    validHosts: number;
    isSpecial: boolean;
}
const {
    ip,
    subnets,
    ipClass,
    defaultSubnetMask,
    defaultNetworkBits,
    defaultHostBits,
    netID,
    newSubnetMask,
    networkBits,
    subnetBits,
    validHosts,
    isSpecial,
} = Astro.props;
const binaryIP = binary(ip);
const defaultWildcardMark = wildcardMask(defaultSubnetMask);
const newWildcardMask = wildcardMask(newSubnetMask);
const items = 250;
const needsPages = subnets > items;
const maxPage = Math.ceil(subnets / items);
const isPOST = Astro.request.method == 'POST';
let page = 1;
if (isPOST) {
    const formData = await Astro.request.formData();
    const data = formData.get('page')?.toString() || '';
    page = parseInt(data);
}
if (needsPages && page > maxPage) {
    return Astro.redirect('/');
}
const offset = page * items - items;
const itemsRemains = subnets - items * (page - 1);
let length = needsPages ? items : subnets;
if (itemsRemains < items) {
    length = itemsRemains;
}
---

<span class="font-bold">General information:</span>
<span>IP: {ip}</span>
<span>Number of subnets: {subnets}</span>
<span>Class: {ipClass}</span>
<span class="font-bold">Detailed information:</span>
<span>Default subnet mask: {defaultSubnetMask}</span>
<span>New subnet mask: {newSubnetMask}</span>
<span>Default wildcard mask: {defaultWildcardMark}</span>
<span>New wildcard mask: {newWildcardMask}</span>
<span>CIDR notation: /{networkBits}</span>
<span class="flex flex-col items-center gap-x-1 md:flex-row">
    Number of hosts for each subnet: {validHosts}
    {
        isSpecial && (
            <span class="font-bold">
                (Special case when normal rule doesn't apply!)
            </span>
        )
    }
</span>
<div class="flex flex-col items-center gap-y-1">
    <div
        class="flex min-h-52 min-w-96 flex-col items-center justify-center rounded-md border-2 px-2 shadow-2xl shadow-black"
    >
        <ThisIP
            ip={binaryIP}
            networkBits={defaultNetworkBits}
            {subnetBits}
            client:only
        >
            <div
                slot="fallback"
                class="flex h-16 w-full items-center justify-center"
            >
                {Array.from({ length: 9 }, () => <LoadingIndicator />)}
            </div>
        </ThisIP>
        <FindIP
            startIP={binaryIP}
            subnets={needsPages ? items : subnets}
            hosts={validHosts}
            networkBits={defaultNetworkBits}
            {subnetBits}
            client:only
        >
            <div
                slot="fallback"
                class="flex h-16 w-full items-center justify-center"
            >
                {Array.from({ length: 9 }, () => <LoadingIndicator />)}
            </div>
        </FindIP>
        <noscript class="absolute">
            <div
                class="rounded-md bg-red-600 px-2 py-4 shadow-2xl shadow-black"
            >
                <span class="text-2xl font-bold text-white"
                    >You need to enable JavaScript!</span
                >
            </div></noscript
        >
    </div>
    <table>
        <colgroup>
            {Array.from({ length: 4 }, () => <col class="w-64" />)}
        </colgroup>
        <thead class="border-2">
            <th>Subnet</th>
            <th>Network IP</th>
            <th>Hosts Range</th>
            <th>Broadcast IP</th>
        </thead>
        <tbody class="border-2 text-center">
            {
                Array.from({ length }, (_, i) => {
                    const subnet = i + offset;
                    const withSubnets = subnet
                        .toString(2)
                        .padStart(subnetBits, '0');
                    const network = decimal(
                        withSubnets.padEnd(defaultHostBits, '0'),
                    );
                    const networkIP = `${netID}.${network}`;
                    const broadcast = decimal(
                        (subnetBits != 0 ? withSubnets : '1').padEnd(
                            defaultHostBits,
                            '1',
                        ),
                    );
                    const broadcastIP = `${netID}.${broadcast}`;
                    const firstIP = isSpecial
                        ? networkIP
                        : usable(networkIP, 1);
                    const lastIP = isSpecial
                        ? broadcastIP
                        : usable(broadcastIP, -1);
                    const equal = networkIP == broadcastIP;
                    return (
                        <tr>
                            <td>Subnet {subnet}</td>
                            <td>{networkIP}</td>
                            {equal && <td>{networkIP}</td>}
                            {!equal && (
                                <td>
                                    {firstIP} - {lastIP}
                                </td>
                            )}
                            <td>{broadcastIP}</td>
                        </tr>
                    );
                })
            }
        </tbody>
    </table>
    {
        needsPages && (
            <form method="post" class="flex items-center gap-x-2 py-2">
                <span>Go to page number:</span>
                <input
                    type="number"
                    name="page"
                    autocomplete="off"
                    value={page}
                    min="1"
                    max={maxPage}
                    required
                    class="rounded-md border-2 p-1.5 text-center"
                />
                <button
                    type="submit"
                    class="cursor-pointer rounded-md border-2 p-1.5"
                >
                    Go!
                </button>
            </form>
        )
    }
</div>
