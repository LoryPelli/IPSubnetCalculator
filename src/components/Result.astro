---
import { z } from 'astro/zod';
import Error from './Error.astro';
import { binary, decimal } from '../utils/conversion';
import IPInfo from './IPInfo.astro';
interface Props {
    ip: string;
    subnets: number;
}
const { ip, subnets } = Astro.props;
const binaryIP = binary(ip);
let error = false;
let errorMessage = '';
if (
    !z
        .array(z.coerce.number().min(0).max(255))
        .length(4)
        .safeParse(ip.split('.')).success
) {
    error = true;
    errorMessage = 'Not a valid IP!';
}
if (!z.coerce.number().min(1).safeParse(subnets).success) {
    error = true;
    errorMessage = 'Number of subnets must be >= 1!';
}
const first = parseInt(ip).toString(2).padStart(8, '0').split('');
if (first.slice(0, 3).join('') == '111') {
    error = true;
    errorMessage = 'Class D and E IPs cannot be assigned to hosts!';
}
let defaultNetworkBits: 8 | 16 | 24;
let defaultHostBits: 8 | 16 | 24;
let ipClass: 'A' | 'B' | 'C';
let defaultSubnetMask: '255.0.0.0' | '255.255.0.0' | '255.255.255.0';
let maxSubnets: number;
if (parseInt(first[0]) == 0) {
    ipClass = 'A';
    defaultSubnetMask = '255.0.0.0';
    defaultNetworkBits = 8;
} else {
    if (parseInt(first[1]) == 0) {
        ipClass = 'B';
        defaultSubnetMask = '255.255.0.0';
        defaultNetworkBits = 16;
    } else {
        ipClass = 'C';
        defaultSubnetMask = '255.255.255.0';
        defaultNetworkBits = 24;
    }
}
switch (defaultNetworkBits) {
    case 8: {
        defaultHostBits = 24;
        break;
    }
    case 16: {
        defaultHostBits = 16;
        break;
    }
    case 24: {
        defaultHostBits = 8;
        break;
    }
}
maxSubnets = Math.pow(2, defaultHostBits);
if (subnets > maxSubnets) {
    error = true;
    errorMessage = `Max number of subnets for a class ${ipClass} address is ${maxSubnets}!`;
}
---

{
    error && (
        <div class="p-4">
            <Error message={errorMessage} />
        </div>
    )
}
{
    !error && (
        <>
            {() => {
                let binarySubnetMask = binary(defaultSubnetMask);
                let bits = Math.ceil(Math.log2(subnets));
                let i = 0;
                binarySubnetMask = binarySubnetMask.replace(/0/g, () =>
                    ++i <= bits ? '1' : '0',
                );
                const networkBits = binarySubnetMask.replace(/0/g, '').length;
                const subnetBits = networkBits - defaultNetworkBits;
                const newSubnetMask = decimal(binarySubnetMask);
                const hostBits = 32 - networkBits;
                const hosts = Math.pow(2, hostBits);
                const validHosts = hosts > 2 ? hosts - 2 : hosts;
                const isSpecial = networkBits == 31 || networkBits == 32;
                const netID = decimal(binaryIP.slice(0, defaultNetworkBits));
                return (
                    <IPInfo
                        {ip}
                        {subnets}
                        {ipClass}
                        {defaultNetworkBits}
                        {defaultSubnetMask}
                        {defaultHostBits}
                        {netID}
                        {newSubnetMask}
                        {networkBits}
                        {subnetBits}
                        {hostBits}
                        {validHosts}
                        {isSpecial}
                    />
                );
            }}
        </>
    )
}
